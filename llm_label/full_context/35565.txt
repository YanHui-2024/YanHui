# Title: REGR: Accessing dict in JITed code in 1.11
"""
Output:
python test.py
Traceback (most recent call last):
  File "test.py", line 43, in <module>
    x, xs = model.forward(torch.ones(10, 10), {})
RuntimeError: The following operation failed in the TorchScript interpreter.
Traceback of TorchScript (most recent call last):
  File "test.py", line 36, in forward
            x = torch.cat((x, score), dim=1)  # removing this line makes it work
        else:
            x, meta = self.activation(x, meta)
                      ~~~~~~~~~~~~~~~ <--- HERE
        meta["meta_y_hat"] = x  # removing this line makes it work
        return meta["meta_y_hat"], meta
  File "test.py", line 13, in forward
        meta["meta_y_hat"] = x
        # return x, meta # would make it work
        return meta["meta_y_hat"], meta  # JIT claims it errors here
               ~~~~~~~~~~~~~~~~~ <--- HERE
RuntimeError: KeyError: meta_y_hat
"""
# Version: PyTorch version: 1.11.0
# Labels: oncall: jit
# PR Title: REGR: Accessing dict in JITed code in 1.11
from typing import Final
import torch
class LinearActivation(torch.nn.Module):
    def forward(
        self, x: torch.Tensor, meta: dict[str, torch.Tensor]
    ) -> tuple[torch.Tensor, dict[str, torch.Tensor]]:
        meta = meta.copy()
        meta["meta_y_hat"] = x
        # return x, meta # would make it work
        return meta["meta_y_hat"], meta  # JIT claims it errors here
class Test(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.flag: Final = ""
        self.activation = LinearActivation()
    def forward(
        self, x: torch.Tensor, meta: dict[str, torch.Tensor]
    ) -> tuple[torch.Tensor, dict[str, torch.Tensor]]:
        meta = meta.copy()
        if self.flag != "":  # this branch should not even be compiled
            # assert False # would make it work
            score = x[:, -1:]
            x, meta = self.activation(
                x[:, :, :-1],  # replacing this with x, would make it work
                meta,
            )
            x = torch.cat((x, score), dim=1)  # removing this line makes it work
        else:
            x, meta = self.activation(x, meta)
        meta["meta_y_hat"] = x  # removing this line makes it work
        return meta["meta_y_hat"], meta
if __name__ == "__main__":
    model = torch.jit.script(Test())
    x, xs = model.forward(torch.ones(10, 10), {})
# API: Dict in JIT Model
# Bug description: a KeyError on model with custom activation
#                  when accessing the property of Dict using torch.jit.script in PyTorch v1.11

# Title: Support default values on NamedTuple fields
"""
Output:
Traceback (most recent call last):
  File "test/tinytest.py", line 22, in <module>
    scripted = torch.jit.script(M())
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/_script.py", line 947, in script
    return torch.jit._recursive.create_script_module(
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/_recursive.py", line 398, in create_script_module
    return create_script_module_impl(nn_module, concrete_type, stubs_fn)
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/_recursive.py", line 459, in create_script_module_impl
    create_methods_and_properties_from_stubs(concrete_type, method_stubs, property_stubs)
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/_recursive.py", line 341, in create_methods_and_properties_from_stubs
    concrete_type._create_methods_and_properties(property_defs, property_rcbs, method_defs, method_rcbs, method_defaults)
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/annotations.py", line 351, in try_ann_to_type
    return torch._C._resolve_type_from_object(ann, loc, fake_rcb)
RuntimeError: 
Default values are currently not supported on NamedTuple fields in TorchScript. Fields with default values: [xy]:
  File "test/tinytest.py", line 17
    def forward(self, point: Point):
                             ~~~~~ <--- HERE
        return point
"""
# Version: PyTorch version: 1.7.1
# Labels: oncall: jit
# PR Title: 
import torch
from torch.fx import symbolic_trace
from collections import namedtuple
from typing import Dict, NamedTuple, Optional, Tuple
class Point(NamedTuple):
    x: Optional[torch.Tensor] = None
    y: Optional[torch.Tensor] = None
class M(torch.nn.Module):
    def __init__(self):
        super(M, self).__init__()
    def forward(self, point: Point):
        return point
p = Point(x=torch.rand(3), y=torch.rand(3))
scripted = torch.jit.script(M())
# API: NamedTuple in JIT Model
# Bug description: a RuntimeError on model accepting a custom type of NamedTuple
#                  when using torch.jit.script in PyTorch v1.7.1

# Title: torch.jit.trace doesn't work with autocast on Conv node.
"""
Output:
ERROR: Graphs differed across invocations!
        Graph diff:
                  graph(%self.1 : __torch__.MyModule,
                        %x : Tensor):
                    %cv1 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="cv1"](%self.1)
                    %4 : int = prim::Constant[value=15]()
                +   %9 : Tensor = prim::Constant[value=0.01 *  6.7810  6.4636  5.3894 [ CUDAHalfType{3} ]](), scope: __module.cv1 # /home/titaiwang/pytorch/torch/nn/modules/conv.py:459:0
                +   %10 : Tensor = prim::Constant[value=<Tensor>](), scope: __module.cv1 # /home/titaiwang/pytorch/torch/nn/modules/conv.py:459:0
                ?             ^
                +   return (%22)
                ?             ^
        First diverging operator:
        Node diff:
                - %cv1 : __torch__.torch.nn.modules.conv.___torch_mangle_2.Conv2d = prim::GetAttr[name="cv1"](%self.1)
                ?                                                        ^
                + %cv1 : __torch__.torch.nn.modules.conv.___torch_mangle_4.Conv2d = prim::GetAttr[name="cv1"](%self.1)
                ?                                                        ^
"""
# Version: PyTorch version: 1.12.1
# Labels: oncall: jit, module: onnx, module: amp (automated mixed precision), onnx-triaged
# PR Title: torch.jit.trace doesn't work with autocast on Conv node.
import torch

class MyModule(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.cv1 = torch.nn.Conv2d(3, 3, 5, 2, 1)

    def forward(self, x):
        x = self.cv1(x)
        return x

x = torch.randn(10, 3, 20, 20) * 2
m = MyModule().eval()
x = x.cuda()
m = m.cuda()

with torch.no_grad():
    print("outside result: ", torch.jit.trace(m, x))
    with torch.cuda.amp.autocast(enabled = True, dtype=torch.float16):
        print("inside result: ", torch.jit.trace(m, x))
# API: torch.nn.Conv2d
# Bug description: Trace sanity check fails when using autocast on Conv node
#                  when using torch.jit.trace in PyTorch v1.12.1

# Title: TorchScript python_print inlining/un-inlining changes semantics on save+load
"""
Output:
---short:
def forward(self,
    arg: List[Tensor]) -> List[Tuple[Tensor]]:
  _0 = [(arg[1],), (torch.argmax(arg[0], None, False),)]
  return _0
graph(%self : __torch__.___torch_mangle_0.OrderModuleShort,
      %arg.1 : Tensor[]):
  %10 : bool = prim::Constant[value=0]()
  %9 : None = prim::Constant()
  %3 : int = prim::Constant[value=1]() # <ipython-input-2-e60618fa51db>:9:21
  %7 : int = prim::Constant[value=0]() # <ipython-input-2-e60618fa51db>:9:32
  %4 : Tensor = aten::__getitem__(%arg.1, %3) # <ipython-input-2-e60618fa51db>:9:17
  %5 : (Tensor) = prim::TupleConstruct(%4)
  %8 : Tensor = aten::__getitem__(%arg.1, %7) # <ipython-input-2-e60618fa51db>:9:28
  %11 : Tensor = aten::argmax(%8, %9, %10) # <ipython-input-2-e60618fa51db>:9:28
  %12 : (Tensor) = prim::TupleConstruct(%11)
  %13 : (Tensor)[] = prim::ListConstruct(%5, %12)
  return (%13)
original
list index out of range
scripted
The following operation failed in the TorchScript interpreter.
Traceback of TorchScript (most recent call last):
  File "<ipython-input-2-e60618fa51db>", line 9, in forward
    def forward(self, arg: List[torch.Tensor]):
        return [(arg[1],), (arg[0].argmax(),)]
                 ~~~~~ <--- HERE
RuntimeError: list index out of range
loaded
The following operation failed in the TorchScript interpreter.
Traceback of TorchScript, serialized code (most recent call last):
  File "code/__torch__/___torch_mangle_0.py", line 6, in forward
  def forward(self: __torch__.___torch_mangle_0.OrderModuleShort,
    arg: List[Tensor]) -> List[Tuple[Tensor]]:
    _0 = (arg[1],)
          ~~~~~ <--- HERE
    _1 = (torch.argmax(arg[0], None, False),)
    return [_0, _1]
Traceback of TorchScript, original code (most recent call last):
  File "<ipython-input-2-e60618fa51db>", line 9, in forward
    def forward(self, arg: List[torch.Tensor]):
        return [(arg[1],), (arg[0].argmax(),)]
                 ~~~~~ <--- HERE
RuntimeError: list index out of range
---long:
def forward(self,
    long_arg_name: List[Tensor]) -> List[Tuple[Tensor]]:
  _0 = torch.argmax(long_arg_name[0], None, False)
  return [(long_arg_name[1],), (_0,)]
graph(%self : __torch__.___torch_mangle_1.OrderModuleLong,
      %long_arg_name.1 : Tensor[]):
  %10 : bool = prim::Constant[value=0]()
  %9 : None = prim::Constant()
  %3 : int = prim::Constant[value=1]() # <ipython-input-2-e60618fa51db>:13:31
  %7 : int = prim::Constant[value=0]() # <ipython-input-2-e60618fa51db>:13:52
  %4 : Tensor = aten::__getitem__(%long_arg_name.1, %3) # <ipython-input-2-e60618fa51db>:13:17
  %5 : (Tensor) = prim::TupleConstruct(%4)
  %8 : Tensor = aten::__getitem__(%long_arg_name.1, %7) # <ipython-input-2-e60618fa51db>:13:38
  %11 : Tensor = aten::argmax(%8, %9, %10) # <ipython-input-2-e60618fa51db>:13:38
  %12 : (Tensor) = prim::TupleConstruct(%11)
  %13 : (Tensor)[] = prim::ListConstruct(%5, %12)
  return (%13)
original
list index out of range
scripted
The following operation failed in the TorchScript interpreter.
Traceback of TorchScript (most recent call last):
  File "<ipython-input-2-e60618fa51db>", line 13, in forward
    def forward(self, long_arg_name: List[torch.Tensor]):
        return [(long_arg_name[1],), (long_arg_name[0].argmax(),)]
                 ~~~~~~~~~~~~~~~ <--- HERE
RuntimeError: list index out of range
loaded
The following operation failed in the TorchScript interpreter.
Traceback of TorchScript, serialized code (most recent call last):
  File "code/__torch__/___torch_mangle_1.py", line 6, in forward
  def forward(self: __torch__.___torch_mangle_1.OrderModuleLong,
    long_arg_name: List[Tensor]) -> List[Tuple[Tensor]]:
    _0 = torch.argmax(long_arg_name[0], None, False)
         ~~~~~~~~~~~~ <--- HERE
    return [(long_arg_name[1],), (_0,)]
Traceback of TorchScript, original code (most recent call last):
  File "<ipython-input-2-e60618fa51db>", line 13, in forward
    def forward(self, long_arg_name: List[torch.Tensor]):
        return [(long_arg_name[1],), (long_arg_name[0].argmax(),)]
                                      ~~~~~~~~~~~~~~~~~~~~~~ <--- HERE
RuntimeError: cannot perform reduction function argmax on a tensor with no elements because the operation does not have an identity
"""
# Version: PyTorch version: 1.4.0
# Labels: high priority, oncall: jit, triaged
# PR Title: TorchScript python_print inlining/un-inlining changes semantics on save+load
import torch
import io
from typing import List
import torch.utils.collect_env
torch.utils.collect_env.main()
class OrderModuleShort(torch.nn.Module):
    def forward(self, arg: List[torch.Tensor]):
        return [(arg[1],), (arg[0].argmax(),)]
class OrderModuleLong(torch.nn.Module):
    def forward(self, long_arg_name: List[torch.Tensor]):
        return [(long_arg_name[1],), (long_arg_name[0].argmax(),)]
def evaluate(cls):
    om = cls()
    sm = torch.jit.script(om)
    print(sm.code)
    print(sm.graph)
    buffer = io.BytesIO()
    torch.jit.save(sm, buffer)
    buffer.seek(0)
    lm = torch.jit.load(buffer)
    for name, mod in [
            ("original", om),
            ("scripted", sm),
            ("loaded", lm),
        ]:
        try:
            mod([torch.zeros(0)])
        except Exception as exn:
            print()
            print(name)
            print(exn)
print("---short:")
evaluate(OrderModuleShort)
print()
print("---long:")
evaluate(OrderModuleLong)
# API: