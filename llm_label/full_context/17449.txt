# Title: REGR: Accessing dict in JITed code in 1.11
"""
Output:
python test.py
Traceback (most recent call last):
  File "test.py", line 43, in <module>
    x, xs = model.forward(torch.ones(10, 10), {})
RuntimeError: The following operation failed in the TorchScript interpreter.
Traceback of TorchScript (most recent call last):
  File "test.py", line 36, in forward
            x = torch.cat((x, score), dim=1)  # removing this line makes it work
        else:
            x, meta = self.activation(x, meta)
                      ~~~~~~~~~~~~~~~ <--- HERE
        meta["meta_y_hat"] = x  # removing this line makes it work
        return meta["meta_y_hat"], meta
  File "test.py", line 13, in forward
        meta["meta_y_hat"] = x
        # return x, meta # would make it work
        return meta["meta_y_hat"], meta  # JIT claims it errors here
               ~~~~~~~~~~~~~~~~~ <--- HERE
RuntimeError: KeyError: meta_y_hat
"""
# Version: PyTorch version: 1.11.0
# Labels: oncall: jit
# PR Title: REGR: Accessing dict in JITed code in 1.11
from typing import Final
import torch
class LinearActivation(torch.nn.Module):
    def forward(
        self, x: torch.Tensor, meta: dict[str, torch.Tensor]
    ) -> tuple[torch.Tensor, dict[str, torch.Tensor]]:
        meta = meta.copy()
        meta["meta_y_hat"] = x
        # return x, meta # would make it work
        return meta["meta_y_hat"], meta  # JIT claims it errors here
class Test(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.flag: Final = ""
        self.activation = LinearActivation()
    def forward(
        self, x: torch.Tensor, meta: dict[str, torch.Tensor]
    ) -> tuple[torch.Tensor, dict[str, torch.Tensor]]:
        meta = meta.copy()
        if self.flag != "":  # this branch should not even be compiled
            # assert False # would make it work
            score = x[:, -1:]
            x, meta = self.activation(
                x[:, :, :-1],  # replacing this with x, would make it work
                meta,
            )
            x = torch.cat((x, score), dim=1)  # removing this line makes it work
        else:
            x, meta = self.activation(x, meta)
        meta["meta_y_hat"] = x  # removing this line makes it work
        return meta["meta_y_hat"], meta
if __name__ == "__main__":
    model = torch.jit.script(Test())
    x, xs = model.forward(torch.ones(10, 10), {})
# API: Dict in JIT Model
# Bug description: a KeyError on model with custom activation
#                  when accessing the property of Dict using torch.jit.script in PyTorch v1.11

# Title: Support default values on NamedTuple fields
"""
Output:
Traceback (most recent call last):
  File "test/tinytest.py", line 22, in <module>
    scripted = torch.jit.script(M())
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/_script.py", line 947, in script
    return torch.jit._recursive.create_script_module(
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/_recursive.py", line 398, in create_script_module
    return create_script_module_impl(nn_module, concrete_type, stubs_fn)
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/_recursive.py", line 459, in create_script_module_impl
    create_methods_and_properties_from_stubs(concrete_type, method_stubs, property_stubs)
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/_recursive.py", line 341, in create_methods_and_properties_from_stubs
    concrete_type._create_methods_and_properties(property_defs, property_rcbs, method_defs, method_rcbs, method_defaults)
  File "/home/ansley/local/miniconda3/envs/pytorch/lib/python3.8/site-packages/torch/jit/annotations.py", line 351, in try_ann_to_type
    return torch._C._resolve_type_from_object(ann, loc, fake_rcb)
RuntimeError: 
Default values are currently not supported on NamedTuple fields in TorchScript. Fields with default values: [xy]:
  File "test/tinytest.py", line 17
    def forward(self, point: Point):
                             ~~~~~ <--- HERE
        return point
"""
# Version: PyTorch version: 1.7.1
# Labels: oncall: jit
# PR Title: 
import torch
from torch.fx import symbolic_trace
from collections import namedtuple
from typing import Dict, NamedTuple, Optional, Tuple
class Point(NamedTuple):
    x: Optional[torch.Tensor] = None
    y: Optional[torch.Tensor] = None
class M(torch.nn.Module):
    def __init__(self):
        super(M, self).__init__()
    def forward(self, point: Point):
        return point
p = Point(x=torch.rand(3), y=torch.rand(3))
scripted = torch.jit.script(M())
# API: NamedTuple in JIT Model
# Bug description: a RuntimeError on model accepting a custom type of NamedTuple
#                  when using torch.jit.script in PyTorch v1.7.1

# Title: torch.jit.trace doesn't work with autocast on Conv node.
"""
Output:
ERROR: Graphs differed across invocations!
        Graph diff:
                  graph(%self.1 : __torch__.MyModule,
                        %x : Tensor):
                    %cv1 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="cv1"](%self.1)
                    %4 : int = prim::Constant[value=15]()
                +   %9 : Tensor = prim::Constant[value=0.01 *  6.7810  6.4636  5.3894 [ CUDAHalfType{3} ]](), scope: __module.cv1 # /home/titaiwang/pytorch/torch/nn/modules/conv.py:459:0
                +   %10 : Tensor = prim::Constant[value=<Tensor>](), scope: __module.cv1 # /home/titaiwang/pytorch/torch/nn/modules/conv.py:459:0
                ?             ^
                +   return (%22)
                ?             ^
        First diverging operator:
        Node diff:
                - %cv1 : __torch__.torch.nn.modules.conv.___torch_mangle_2.Conv2d = prim::GetAttr[name="cv1"](%self.1)
                ?                                                        ^
                + %cv1 : __torch__.torch.nn.modules.conv.___torch_mangle_4.Conv2d = prim::GetAttr[name="cv1"](%self.1)
                ?                                                        ^
"""
# Version: PyTorch version: 1.12.1
# Labels: oncall: jit, module: onnx, module: amp (automated mixed precision), onnx-triaged
# PR Title: torch.jit.trace doesn't work with autocast on Conv node.
import torch

class MyModule(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.cv1 = torch.nn.Conv2d(3, 3, 5, 2, 1)

    def forward(self, x):
        x = self.cv1(x)
        return x

x = torch.randn(10, 3, 20, 20) * 2
m = MyModule().eval()
x = x.cuda()
m = m.cuda()

with torch.no_grad():
    print("outside result: ", torch.jit.trace(m, x))
    with torch.cuda.amp.autocast(enabled = True, dtype=torch.float16):
        print("inside result: ", torch.jit.trace(m, x))
# API: torch.nn.Conv2d
# Bug description: Trace sanity check fails when using autocast on Conv node
#                  when using torch.jit.trace in PyTorch v1.12.1

# Title: [JIT] encodeRHS val.isInt() ASSERT FAILED during fusion
"""
Output:
fmassa-mbp:~ fmassa$ python tst4.py
Traceback (most recent call last):
  File "tst4.py", line 30, in <module>
    box_iou(torch.rand(4, 4), torch.rand(5, 4))
  File "/Users/fmassa/anaconda3/lib/python3.6/site-packages/torch/nn/modules/module.py", line 491, in __call__
    result = self.forward(*input, **kwargs)
RuntimeError: val.isInt() ASSERT FAILED at /Users/distiller/project/conda/conda-bld/pytorch-nightly_1550985177969/work/torch/csrc/jit/fuser/codegen.cpp:220, please report a bug to PyTorch. (encodeRHS at /Users/distiller/project/conda/conda-bld/pytorch-nightly_1550985177969/work/torch/csrc/jit/fuser/codegen.cpp:220)
frame #0: c10::Error::Error(c10::SourceLocation, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 135 (0x10879d6e7 in libc10.dylib)
frame #1: torch::jit::fuser::generateKernel(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, torch::jit::Graph const&, std::__1::vector<std::__1::pair<torch::jit::Value const*, torch::jit::fuser::TensorDesc const>, std::__1::allocator<std::__1::pair<torch::jit::Value const*, torch::jit::fuser::TensorDesc const> > > const&, std::__1::vector<std::__1::pair<torch::jit::Value const*, torch::jit::fuser::TensorDesc const>, std::__1::allocator<std::__1::pair<torch::jit::Value const*, torch::jit::fuser::TensorDesc const> > > const&, bool) + 20806 (0x10ed300c6 in libtorch.1.dylib)
frame #2: torch::jit::fuser::compileKernel(torch::jit::fuser::KernelSpec const&, torch::jit::fuser::ArgSpec const&, std::__1::vector<long long, std::__1::allocator<long long> > const&, c10::Device) + 3696 (0x10ed1e980 in libtorch.1.dylib)
frame #3: torch::jit::fuser::runFusion(long long, std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&) + 1632 (0x10ed26830 in libtorch.1.dylib)
frame #4: torch::jit::runFusion(long long, std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&) + 18 (0x10ec2f5f2 in libtorch.1.dylib)
frame #5: std::__1::__function::__func<torch::jit::(anonymous namespace)::$_1::operator()(torch::jit::Node const*) const::'lambda'(std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&), std::__1::allocator<torch::jit::(anonymous namespace)::$_1::operator()(torch::jit::Node const*) const::'lambda'(std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&)>, int (std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&)>::operator()(std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&) + 45 (0x10ec2ff8d in libtorch.1.dylib)
frame #6: torch::jit::InterpreterStateImpl::runImpl(std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&) + 245 (0x10eb7b015 in libtorch.1.dylib)
frame #7: torch::jit::InterpreterStateImpl::run(std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&) + 28 (0x10eb7354c in libtorch.1.dylib)
frame #8: torch::jit::GraphExecutorImpl::run(std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&) + 4274 (0x10eb4ffa2 in libtorch.1.dylib)
frame #9: torch::jit::script::Method::run(std::__1::vector<c10::IValue, std::__1::allocator<c10::IValue> >&) + 216 (0x1047f66e8 in libtorch_python.dylib)
frame #10: torch::jit::invokeScriptMethodFromPython(torch::jit::script::Method&, torch::jit::tuple_slice, pybind11::kwargs) + 73 (0x1047f65a9 in libtorch_python.dylib)
frame #11: void pybind11::cpp_function::initialize<torch::jit::script::initJitScriptBindings(_object*)::$_17, pybind11::object, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling>(torch::jit::script::initJitScriptBindings(_object*)::$_17&&, pybind11::object (*)(pybind11::args, pybind11::kwargs), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&)::'lambda'(pybind11::detail::function_call&)::__invoke(pybind11::detail::function_call&) + 340 (0x1047f62b4 in libtorch_python.dylib)
frame #12: pybind11::cpp_function::dispatcher(_object*, _object*, _object*) + 3324 (0x10439785c in libtorch_python.dylib)
<omitting python frames>
frame #32: start + 1 (0x7fff59ab1ed9 in libdyld.dylib)
"""
# Version: PyTorch version: 1.0.1
# Labels: oncall: jit
# PR Title: [JIT] encodeRHS val.isInt() ASSERT FAILED during fusion
import torch
torch._C._jit_override_can_fuse_on_cpu(True)
@torch.jit.script
def box_iou(box1, box2, eps:float=1e-5):
    # box1: [N, 4], box2: [M, 4]
    x1, y1, w1, h1 = box1.unsqueeze(1).unbind(2)
    x2, y2, w2, h2 = box2.unbind(1)
    xi = torch.max(x1, x2)  # Intersection
    yi = torch.max(y1, y2)
    wi = torch.clamp(torch.min(x1 + w1, x2 + w2) - xi, min=0)
    hi = torch.clamp(torch.min(y1 + h1, y2 + h2) - yi, min=0)
    return wi, hi
box_iou(torch.rand(4, 4), torch.rand(5, 4))
print(box_iou.graph_for(torch.rand(4, 4), torch.rand(5, 4)))
# API: