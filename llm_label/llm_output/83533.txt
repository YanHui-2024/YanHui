 torch.nn.Conv2d
# Bug description: trace sanity check fails on mps models
#                  when using torch.jit.trace in PyTorch v1.12.1

# Title: [jit] Runtime error while trying to load JIT model with custom op
"""
Output:
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-48-639c50f78a18> in <module>()
      2
      3 if __name__ == "__main__":
----> 4     print(torch.jit.load("mnist_train.pt"))
      5 else:
      6     pass

~/anaconda3/envs/pytorch101/lib/python3.7/site-packages/torch/serialization.py in load(*args, **kwargs)
     48 def _load(f, map_location, pickle_module):
     49     deserialized_objects = {str(UNKNOWN_KEY): None}
---> 50     ret = _load_from_file(f, args, kwargs, pickle_module)
     51     if len(deserialized_objects) == 1:
     52         # If we only loaded a single object, the caller likely expects to get it.

~/anaconda3/envs/pytorch101/lib/python3.7/site-packages/torch/serialization.py in _load_from_file(f, args, kwargs, pickle_module)
    926                           global_map=cls._global_class_registry(), metadata=metadata))
    927   finally:
--> 928         deserialized = _legacy_load(f, map_location, pickle_module)
    929         if hasattr(_C, "__jit_pass_through"):
    930             # We're calling the function named "_legacy_save", not "pickle.load(file)", so we need to

~/anaconda3/envs/pytorch101/lib/python3.7/site-packages/torch/serialization.py in _legacy_load(f, map_location, pickle_module)
    235         elif issubclass(pickle_module, dict):
    236             objects = pickle_module(objects)  # type: ignore[call-overload]
--> 237             deserialized = _mk_legacy_container([], None, objects)
    238         else:
    239             raise RuntimeError("pickle_module must be a dict")

~/anaconda3/envs/pytorch101/lib/python3.7/site-packages/torch/_utils.py in _mk_legacy_container(f, global_map, objects)
     98 def _mk_legacy_container(f: Callable[..., Any], global_map: Dict[str, type], objects: dict):
     99     from torch._six import with_metaclass, PY2, PY37  # type: ignore[attr-defined]
---> 100     class _LegacyModuleContainer(with_metaclass(torch.jit._script._RecursiveScriptModule, object)):  # type: ignore[name-defined]
    101         def __init__(self):  # type: ignore[no-redef]
    102             self.__dict__ = objects

~/anaconda3/envs/pytorch101/lib/python3.7/site-packages/torch/nn/modules/_functions.py in __init__(self, func)
     46         # This ensures that the user will be able to call the op on any variable
     47         # and it will return a function that can only be called with tensors of the
---> 48         self._op = getattr(torch.ops.__name__, func)
     49
     50     def forward(self, *args):

AttributeError: module 'torch' has no attribute 'ops'
"""
# Version: PyTorch version: 1.3.1
# Labels: oncall: jit, good first issue, bug
# PR Title: [jit] Runtime error while trying to load JIT model with custom op
import torch
from _utils import TestCase, run_tests
def custom_sigmoid(x):
    return 1 / (1 + torch.exp(-x))
class SimpleTest(TestCase):
    def test_custom_op_error(self):
        f = lambda x: x * 2
        t = torch._C._create_script_class_from_closure(f, "mytensor")
        self.assertEqual((t() * 0).item(), 0)
if __name__ == '__main__':
    run_tests()
# API: custom op with autograd
# Bug description: when running model.train(), forward function does not work for custom op
import torch
from torch._C import _jit_set_profiling_executor as jit_set_profiling_executor, \
    _jit_set_profiling_mode as jit_set_profiling_mode, _jit_clear_class_registry as clear_class_registry, \
    _jit_load_state_dict as load_state_dict
jit_set_profiling_executor(False)
jit_set_profiling_mode(False)
clear_class_registry()
# model is a simple network with one custom sigmoid op (defined in the same script, no import)
# note that this can be simplified to just use nn.Sigmoid(), but we are testing the case of a custom op here
model = torch._C._create_script_class_from_closure(custom_sigmoid, "MyModel", constructor_arity=1)()
model = model.eval()
# load state dict with script module
state = {"model": model}
load_state_dict(state)
# run forward pass on the model
result = model(torch.randn((5, 2)))
result