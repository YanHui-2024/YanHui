# API: torch.cat
# Bug description: Crashes when using autocast on FusedConcat node and then tracing it to a graph
#                  when using torch.jit.script in PyTorch v0.4.1
import torch
@torch.jit.script
def fn(x, y, z):
    x1 = x + y 
    y1 = x - y
    w = torch.cat([x1, y1])
    return w + z

x = torch.randn(2, 2, dtype=torch.float, device='cpu')
y = torch.randn(2, 2, dtype=torch.float, device='cpu')
z = torch.randn(4, 2, dtype=torch.float, device='cpu')
fn(x, y, z)
fn.graph_for(x, y, z)


# API: NN Module Interface
# Bug description: The cloning fails when using certain hierarchies involving module interfaces in PyTorch v1.5.1
import torch
import torch.nn as nn

        
@torch.jit.interface
class OperatorIf(nn.Module):
    def forward(self, inp: torch.Tensor) -> torch.Tensor:
        pass


class Operator(nn.Module):
    def __init__(self, a):
        super().__init__()
        self.a = a
        
    def forward(self, inp: torch.Tensor) -> torch.Tensor:
        return self.a * (inp + self.a)
        

class Inner(nn.Module):
    op: OperatorIf
    def __init__(self, op):
        super().__init__()
        self.op = op
        
    def forward(self, inp):
        return self.op(inp)


class Outer(nn.Module):
    def __init__(self):
        super().__init__()
        self.inner_a = Inner(Operator(1))
        self.inner_b = Inner(Operator(3.0))


if __name__ == "__main__":
    s = torch.jit.script(Outer())
    torch.jit.save(s, "/tmp/s.pt")


# API: ScriptModule
# Bug description: The trace does not have model signature
#                  when using torch.jit.trace on inception v3 model
#                  in PyTorch version: 1.0.0
traced_script_module(example) # Tries to print out the model signature, but fails with exception:
import torch
import torchvision

# An instance of your model.
model = torchvision.models.inception_v3(pretrained=True)

# An example input you would normally provide to your model's forward() method.
example = torch.rand(1, 3, 299, 299)

# Use torch.jit.trace to generate a torch.jit.ScriptModule via tracing.
traced_script_module = torch.jit.trace(model, example)


# API: Special Op(aten::normal_) in JIT Model
# Bug description: a RuntimeError on model having aten::normal_ as an input to nn.Linear layer
#                  when using torch.jit.script in PyTorch v1.7.1
class Noise(nn.Module):
    def forward(self, image):
        return image.new_empty(2, 1, 3, 4).normal_()


# API: