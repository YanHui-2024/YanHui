# API: torch.jit.trace (python thread)
# Bug description:
#                  When calling `torch.jit.load` from a python thread other than the main one, it hangs indefinitely.
#                  For example, running the code below will hang indefinitely:
#                  ```
#                      def dummy_worker(filepath):
#                          traced = torch.jit.load(filepath)
#                  filepath = "dummy_model.pt"
#                      threading.Thread(target=dummy_worker, args=[filepath]).start()
#                      ````
#                  The same code works if called from the main thread.
import torch
from concurrent.futures import ThreadPoolExecutor

with ThreadPoolExecutor(max_workers=1) as executor:
    executor.submit(torch.jit.load, 'dummy_model.pt')


# API: torch.jit.script, save, load
# Bug description: Trace sanity check fails when using autocast on Conv node
#                  when using torch.jit.trace in PyTorch v1.12.1
import torch
import io
from typing import List
import torch.utils.collect_env
torch.utils.collect_env.main()

class OrderModuleShort(torch.nn.Module):
    def forward(self, arg: List[torch.Tensor]):
        return [(arg[1],), (arg[0].argmax(),)]

class OrderModuleLong(torch.nn.Module):
    def forward(self, long_arg_name: List[torch.Tensor]):
        return [(long_arg_name[1],), (long_arg_name[0].argmax(),)]

def evaluate(cls):
    om = cls()
    sm = torch.jit.script(om)
    print(sm.code)
    print(sm.graph)
    buffer = io.BytesIO()
    torch.jit.save(sm, buffer)
    buffer.seek(0)
    lm = torch.jit.load(buffer)

    for name, mod in [
            ("original", om),
            ("scripted", sm),
            ("loaded", lm),
        ]:
        try:
            mod([torch.zeros(0)])
        except Exception as exn:
            print()
            print(name)
            print(exn)


print("---short:")
evaluate(OrderModuleShort)
print()
print("---long:")
evaluate(OrderModuleLong)


# API: gc
# Bug description: When importing torch it fails with a RuntimeError "No such operator __file__::__file__"
import gc
import torch
print(len(gc.get_objects))  # Works
a = gc.get_objects()  # works
print(gc.get_objects())  # Fails
for obj in gc.get_objects():
    print(obj)  # Works until encountering torch
                    # Though it works on some files
print(sum(map(sys.getsizeof, gc.get_objects())))  # Works
print(collections.Counter(map(type, gc.get_objects())))  # Works


# API: Numpy tensordot
# Bug description: np.tensordot throws an error when using the first argument is an empty array and the second is not
#                  using numpy version: 1.19.4
>>> np.tensordot(np.zeros(()), np.zeros(()), 0)
array(0.)


# API: