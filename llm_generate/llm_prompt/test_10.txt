# API: torch._C.parse_ir
# Bug description: Cannot parse IR for "prim::Constant[value=annotate(List[int], []))]"
#                  when using PyTorch v1.10.2
import torch

ir = """
graph():
  %7 : Long(1, strides=[1], requires_grad=0, device=cpu) = prim::Constant[value={0}]()
  return (%7)
"""

torch._C.parse_ir(ir)


# API: Dedent in JIT Model
# Bug description: IndentationError when dedenting code for JIT in PyTorch v1.2.0
import torch

class Foo(torch.nn.Module):
    def forward(self, x):
        x = torch.neg(x)
# foo foo foo i have a comment at the wrong indent
        return x

torch.jit.script(Foo())


# API: namedtuple
# Bug description: JIT fails to match namedtuples with different ordering of fields in a graph.
#                  when using torch.jit.trace in PyTorch v1.6.0, the order of fields in the tuple affects the matching.
class TestModule(torch.nn.Module):
    def forward(self, x):
        return x.transpose(0,1)
    
class AnotherTestModule(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.inner_module = TestModule()
        
    def forward(self, y):
        return self.inner_module(x=y)
    
module = AnotherTestModule()
trace_input = torch.ones([1,1])
traced_module = torch.jit.trace_module(module, dict(forward=(trace_input,)))
 
try:
    print('Original module')
    module(y=trace_input)
    print('Correct\n')
except RuntimeError as e:
    print(e, '\n')
 
try:
    print('Traced module')
    traced_module(y=trace_input)
    print('Correct\n')
except RuntimeError as e:
    print(e, '\n')
 
print('Traced module code')
print(traced_module.code)


# API: ParameterDict in JIT Model
# Bug description: Trace sanity check fails when using autocast on Conv node
#                  when using torch.jit.trace in PyTorch v1.12.1
In [1]: import torch

In [2]: torch.__version__
Out[2]: '1.12.0.dev20220412'

In [3]: import torch as th
   ...: 
   ...: 
   ...: class TestMod(th.nn.Module):
   ...:     def __init__(self):
   ...:         super().__init__()
   ...:         self.params = th.nn.ParameterDict(
   ...:             {"hi": th.nn.Parameter(th.zeros(3)), "bye": th.nn.Parameter(th.zeros(3))}
   ...:         )
   ...: 
   ...:     def forward(self, x):
   ...:         return x + self.params["hi"] + self.params["bye"]
   ...: 
   ...: 
   ...: mod = TestMod()
   ...: smod = th.jit.script(mod)


# API: