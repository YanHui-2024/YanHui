# API: Union[NoneType, T] in JIT Model
# Bug description: a RuntimeError on model accepting an optional custom type
#                  when using torch.jit.script in PyTorch v1.7.1
class TestModule(torch.nn.Module):
    def forward(self, x: torch.Tensor, k: Optional[int]):
        return x

m = TestModule()
gm = torch.fx.symbolic_trace(m)
scripted_gm = torch.jit.script(gm)


# API: TorchScript
# Bug description: Tuple index operator doesn't seem to work on a scripted function
#                  when using torch.jit.script in PyTorch v1.0rc1
@torch.jit.script
def f(x):
    return torch.sort(x)[0]


# API: for..else in JIT model
# Bug description: The "for" loop is not working as expected when using torch.jit.script on PyTorch 1.7.1
import torch

@torch.jit.script
def test():
    c = 0
    for i in range(4):
        c += 10
    else:
        print("In else block of for...else")
    return c
      
print(test())



# API: 
class resblock(ScriptModule):

    __constants__ = ["nblocks","ch","shortcut"]

    def __init__(self, ch, nblocks=1, shortcut=True):

        super().__init__()
        self.shortcut = shortcut
        self.nblocks = nblocks
        self.ch = ch
        self.module_list = nn.ModuleList()
        self.blockt1=add_conv(self.ch, self.ch//2, 1, 1)
        self.blockt2=add_conv(self.ch//2, self.ch, 3, 1)
        for _ in range(nblocks):
            resblock_one = nn.ModuleList()
            self.blockt1
            self.blockt2
            self.module_list.append(resblock_one)

    @script_method
    def forward(self, x):
        for _ in range(self.nblocks):#in_ch, out_ch, ksize, stride
            h = x
            h = self.blockt1(h)
            h = self.blockt2(h)
            x = x + h if self.shortcut else h
        return x


# API: